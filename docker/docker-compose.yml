version: '3.6'

networks:
  traefik-global-proxy:
    name: "traefik-global-proxy"

services:
  traefik:
    # The official v2 Traefik docker image
    image: traefik:v2.5
    container_name: "traefik"
    # Enables the web UI and tells Traefik to listen to docker
    networks:
      - traefik-global-proxy

    labels:
      - "traefik.enable=true" # enable the dashboard
      - "traefik.http.routers.traefik.rule=Host(`monitor.telecaster.io`)" # domain for dashboard
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik.service=api@internal" # points to dashboard
      - "traefik.http.routers.traefik.middlewares=auth" # enable password auth
      - "traefik.http.middlewares.auth.basicauth.users=cam:$$apr1$$CG/rAvj2$$RbAAFLRNlA6fsE/FvYPW3." # substitute with your htpasswd string and escape dollar signs!
      - "traefik.http.routers.traefik.middlewares=traefik-compress"
      - "traefik.http.middlewares.traefik-compress.compress=true"

    ports:
      # The HTTP port cam:ZynSlammer1029
      - "80:80"
      - "443:443"
      - "1935:1935"

    volumes:
      - "./traefik.toml:/etc/traefik/traefik.toml"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt:/letsencrypt"
      - "./access_logs:/access_logs"

  whoami:
    # A container that exposes an API to show its IP address
    image: traefik/whoami
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.rule=Host(`whoami.docker.localhost`)"

  angular-app:
    build:
      context: ./
      dockerfile: ui/Dockerfile
    restart: always  
    networks:
      - traefik-global-proxy  
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.angular-app.rule=Host(`telecaster.io`)"
      - "traefik.http.routers.angular-app.entrypoints=websecure"
      - "traefik.http.routers.angular-app.tls.certresolver=letsencrypt"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
    environment:
      - NODE_ENV=production

  nestjs-app:
    build:
      context: ./server
      dockerfile: Dockerfile-app
    networks:
      - traefik-global-proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nestjs-app.rule=Host(`app.telecaster.io`)"
      - "traefik.http.routers.nestjs-app.entrypoints=websecure"
      - "traefik.http.routers.nestjs-app.service=nestjs-app"
      - "traefik.http.routers.nestjs-app.tls.certresolver=letsencrypt"

      - "traefik.http.services.nestjs-app.loadbalancer.server.port=3000"
      - "traefik.http.services.nestjs-app.loadbalancer.healthcheck.path=/health"

      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      
    environment:
      - NODE_ENV=production
    restart: always    
    depends_on:
      - redis

  redis:
    image: "redis:alpine"
    command: redis-server
    restart: always
    ports:
     - "6379:6379"
    volumes:
     - $PWD/redis-data:/var/lib/redis
     - $PWD/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - traefik-global-proxy
    environment:
     - REDIS_REPLICATION_MODE=master